// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relationships
  accounts Account[]
  sessions Session[]

  // Game relationships
  gamesAsWhite Game[] @relation("WhitePlayer")
  gamesAsBlack Game[] @relation("BlackPlayer")
  gameMoves    GameMove[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Game {
  id          String      @id @default(cuid())
  whitePlayer User        @relation("WhitePlayer", fields: [whitePlayerId], references: [id])
  whitePlayerId String
  blackPlayer User        @relation("BlackPlayer", fields: [blackPlayerId], references: [id])
  blackPlayerId String
  status      String      @default("WAITING") // WAITING, IN_PROGRESS, FINISHED, ABANDONED
  currentFen  String      @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  winner      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  moves GameMove[]

  @@map("games")
}

model GameMove {
  id        String   @id @default(cuid())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  player    User     @relation(fields: [playerId], references: [id])
  playerId  String
  move      String   // SAN notation
  from      String   // e.g., "e2"
  to        String   // e.g., "e4"
  fen       String   // FEN after move
  moveNumber Int
  createdAt DateTime @default(now())

  @@map("game_moves")
}

